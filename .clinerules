# Roughly-UX-Reviewer 開発ルール

## Figmaプラグイン開発ルール

### 重要: create-figma-pluginフレームワークを使用すること

- **必須**: Figmaプラグインの開発には、create-figma-pluginフレームワークを使用すること
- **必須**: UIコンポーネントには@create-figma-plugin/uiライブラリを優先的に使用すること
- **理由**: create-figma-pluginは、Figmaプラグイン開発における多くの一般的な問題を解決し、より保守性の高いコードベースを実現するため

### プロジェクト構成

```
src/
├── main/ (プラグインのメインコード)
│   ├── index.ts (エントリーポイント)
│   └── utils/ (メインコンテキスト用ユーティリティ)
├── ui/ (UIコード)
│   ├── components/ (Preactコンポーネント)
│   └── index.tsx (UIのエントリーポイント)
└── utils/ (共通ユーティリティ)
    ├── api.ts
    └── types.ts
```

### 実装ガイドライン

#### 1. メインコンテキスト (src/main/index.ts)

```typescript
import { once, showUI } from '@create-figma-plugin/utilities'
import { UIEventHandler } from '../utils/types'

export default function () {
  // UIを表示
  showUI({
    width: 450,
    height: 650
  })
  
  // UIからのメッセージを処理
  once<UIEventHandler>('EVENT_NAME', function (data) {
    // メッセージ処理
  })
}
```

#### 2. UIコンテキスト (src/ui/index.tsx)

```tsx
import { h } from 'preact'
import { useCallback } from 'preact/hooks'
import { emit } from '@create-figma-plugin/utilities'
import { Button, Container, VerticalSpace } from '@create-figma-plugin/ui'

function Plugin() {
  const handleClick = useCallback(function () {
    emit('EVENT_NAME', { /* データ */ })
  }, [])
  
  return (
    <Container space="medium">
      <Button onClick={handleClick}>ボタン</Button>
      <VerticalSpace space="small" />
    </Container>
  )
}

export default Plugin
```

### 技術的背景

#### 1. create-figma-pluginの利点

- **UIとロジックの分離**: Preactを使用してUIコンポーネントとロジックを明確に分離
- **型安全性**: TypeScriptの恩恵を最大限に活用
- **ビルドプロセスの最適化**: esbuildによる高速なビルド
- **Figmaデザインシステムとの一貫性**: @create-figma-plugin/uiコンポーネントによるFigmaライクなUI
- **メッセージング**: 型安全なイベント駆動通信

#### 2. @create-figma-plugin/uiコンポーネントの利点

- Figmaのデザインシステムに準拠したUIコンポーネント
- ダークモードとライトモードの自動サポート
- アクセシビリティに配慮された実装
- 一貫性のあるUIを簡単に構築可能

### 注意点

- create-figma-pluginの公式ドキュメントに従ってプロジェクトを構成すること
- メインコンテキストとUIコンテキスト間の通信には、emit/onceなどのcreate-figma-pluginが提供するユーティリティを使用すること
- UIコンポーネントは@create-figma-plugin/uiから提供されるものを優先的に使用し、Figmaのデザインシステムとの一貫性を保つこと
- 大規模なコードベースでは、適切にコンポーネントを分割し、再利用可能なモジュールを作成すること

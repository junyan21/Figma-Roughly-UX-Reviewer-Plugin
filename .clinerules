# Zakkuri-UX-Reviewer 開発ルール

## Figmaプラグイン UI初期化ルール

### 重要: UIの初期化処理はui.htmlに直接記述すること

- **必須**: FigmaプラグインのUIの初期化処理は、ui.htmlファイル内の`<script>`タグに直接記述すること
- **禁止**: TypeScriptファイル（ui.ts）からのインポートや外部ファイルの参照に依存しないこと
- **理由**: Figmaプラグインの仕様上、HTMLに直接JavaScriptを埋め込まないとプラグインが正常に動作しない

### 実装例

```html
<!-- ui.html -->
<script>
  // UIの初期化処理を直接ここに記述する
  // イベントリスナーの設定
  document.getElementById('button').addEventListener('click', () => {
    // 処理
  });
  
  // Figmaプラグインとの通信
  window.onmessage = (event) => {
    if (event.data.pluginMessage) {
      // メッセージ処理
    }
  };
</script>
```

### 技術的背景

#### 1. Figmaプラグインの実行環境の特殊性

- Figmaプラグインは2つの実行コンテキストで動作する：
  - **メインコンテキスト**: Figmaのドキュメントにアクセスできるが、DOMにはアクセスできない
  - **UIコンテキスト**: iframeとして実行され、DOMにアクセスできるが、Figmaのドキュメントには直接アクセスできない
- これらのコンテキスト間の通信は`postMessage`APIを介して行われる
- UIコンテキストの初期化タイミングは非常に重要で、外部ファイルの読み込みに依存すると初期化順序の問題が発生する

#### 2. ロード順序とタイミングの問題

- 外部TypeScriptファイル（ui.ts）を使用すると、以下の問題が発生する可能性がある：
  - TypeScriptファイルのコンパイル・バンドル後のコードが、想定通りのタイミングで実行されない
  - 依存関係の解決に時間がかかり、Figmaプラグインのライフサイクルイベントを逃す
  - 非同期ロードによる競合状態（race condition）が発生する

#### 3. Webpackの設定と影響

- 現在のwebpack.config.jsでは、以下の設定が行われている：
  ```javascript
  entry: {
    // ui.tsは使用せず、ui.htmlに直接スクリプトを埋め込む
    code: "./src/plugin/code.ts",
  },
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/ui/ui.html",
      filename: "ui.html",
      chunks: [], // ui.tsのエントリーポイントを削除したため、chunksは空に
      inject: false, // スクリプトは既にHTMLに埋め込まれているため、injectしない
    }),
  ],
  ```
- この設定は、ui.tsを使用せず、ui.htmlに直接スクリプトを埋め込む方針を明示している
- `chunks: []`と`inject: false`の設定により、Webpackは自動的にバンドルされたJavaScriptをHTMLに注入しない

#### 4. 実際に発生した問題

- ui.tsを使用した場合、以下の問題が観察された：
  - プラグイン起動時にUIが正しく初期化されないケースがある
  - Figmaからのメッセージイベントが適切に処理されない
  - サーバー接続状態の確認など、起動直後に実行されるべき処理が遅延または実行されない
  - 特にFigmaのバージョンアップ後に互換性の問題が発生しやすい

#### 5. パフォーマンスと信頼性への影響

- HTMLに直接JavaScriptを埋め込むことで得られる利点：
  - 初期化処理の実行順序が明確になる
  - 外部ファイルの読み込み待ちによる遅延がなくなる
  - Figmaプラグインのライフサイクルイベントを確実に捕捉できる
  - ブラウザキャッシュの問題を回避できる

### 注意点

- ui.tsファイルが存在する場合でも、UIの初期化処理はui.htmlに直接記述すること
- APIリクエストなどの共通機能も、可能な限りui.html内に直接実装すること
- この方針は今後の変更でも必ず維持すること
- 大規模なコードベースになった場合でも、モジュール分割はui.html内で行い、外部ファイルへの依存は避けること
